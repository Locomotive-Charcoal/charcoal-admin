{
  "name": "Charcoal-admin",
  "tagline": "The admin (Backend Dashboard) for Charcoal",
  "body": "Charcoal Admin Module\r\n=====================\r\n\r\nThe standard Charcoal Admin Panel (Backend Dashboard).\r\n\r\n# How to install\r\n\r\nThe preferred (and only supported) way of installing charcoal-admin is with **composer**:\r\n\r\n```shell\r\n$ composer require locomotivemtl/charcoal-admin\r\n```\r\n\r\n## Dependencies\r\n\r\n- [locomotivemtl/charcoal-core](https://github.com/locomotivemtl/charcoal-core)\r\n\t- The framework classes. (Cache, Model, Metadata, View, Property, source, etc.)\r\n\t- It brings the following dependencies:\r\n\t\t- [locomotivemtl/charcoal-config](https://github.com/locomotivemtl/charcoal-config)\r\n\t\t\t- The configuration container for all things Charcoal.\r\n\t\t- [locomotivemtl/charcoal-view](https://github.com/locomotivemtl/charcoal-view)\r\n\t\t\t- The view / templating engines. Mustache is the default engine.\r\n- [locomotivemtl/charcoal-base](https://github.com/locomotivemtl/charcoal-base)\r\n\t- Base project classes: Assets, Objects, Properties, Templates and Widgets\r\n\t- It brings the additional charcoal dependencies:\r\n\t\t- [locomotivemtl/charcoal-image](https://github.com/locomotivemtl/charcoal-image)\r\n\t\t\t- Image manipulation.\r\n\r\n> ðŸ‘‰ Development dependencies are described in the _Development_ section of this README file.\r\n\r\nWhich, in turn, require:\r\n\r\n- `PHP 5.5+`\r\n\t- Older versions of PHP are deprecated, therefore not supported.\r\n\t- `ext-fileinfo` File / MIME identification.\r\n\t- `ext-mbstring` Multi-bytes string support.\r\n\t- `ext-pdo` PDO Database driver.\r\n- MySQL\r\n\t- Other databases (_postgresql_, _sqlite_) should work but are not supported.\r\n- Apache with `mod_rewrite`\r\n\t- Other HTTP servers (_IIS_, _nginx) should work but are not supported.\r\n- `pimple/pimple` for dependency injection container.\r\n- `slim/slim` for the routing engine and HTTP handling.\r\n- `mustache/mustache` for the template engine.\r\n- `phpmailer` to send emails.\r\n- `league/climate` for CLI utilities.\r\n- `monolog/monolog` for (_PSR-3_) logging.\r\n\r\n# Core concepts\r\n\r\n**todo**\r\n\r\n# What's inside this module?\r\n\r\nLike all Charcoal projects / modules, the main components are:\r\n\r\n- **Autoloader**\r\n\t- _PSR-4_, Provided by Composer.\r\n- **Config**\r\n\t- As JSON or PHP files in the [config/](config/) directory.\r\n- **Front Controller**\r\n\t- The admin front controller is handled in the `\\Charcoal\\Admin\\Module` class.\r\n- **Objects**\r\n\t- Typically  into `\\Charcoal\\Object\\Content` and `\\Charcoal\\Object\\UserData`\r\n\t- Extends `\\Charcoal\\Model\\AbstractModel`, which implements the following interface:\r\n\t\t- `\\Charcoal\\Model\\ModelInterface`\r\n\t\t- `\\Charcoal\\Core\\IndexableInterface`\r\n\t\t- `\\Charcoal\\Metadata\\DescribableInterface`\r\n\t\t- `\\Charcoal\\Source\\StorableInterface`\r\n\t\t- `\\Charcoal\\Validator\\ValidatableInterface`\r\n\t\t- `\\Charcaol\\View\\ViewableInterface`\r\n\t- PHP Models in `src/Charcoal/Boilerplate/`\r\n\t- JSON metadata in `metadata/charcoal/boilerplate/`\r\n- **Templates**\r\n\t- Templates are specialized Model which acts as View / Controller\r\n\t- Split in `Templates`, `Widgets` and `PropertyInput`\r\n\t\t- All defined in the `charcoal-base` module\r\n\t\t- All those classes extend `\\Charcoal\\Model\\AbstractModel`\r\n\t- PHP Models in `src/Charcoal/Boilerplate/Template/`\r\n\t- Mustache views (templates) in `templates/boilerplate/`\r\n\t- Optionnally, templates metadata in `metdata/boilerplate/template/`\r\n- **Actions**\r\n\t- Actions handle input and provide a response to a request\r\n\t- The PHP classes in `src/Charcoal/Boilerplate/Action`\r\n- **Assets**\r\n\t- Assets are files required to be on the webserver root\r\n\t- Scripts, in `src/scripts/` and compiled in `www/assets/scripts/`\r\n\t- Styles , with SASS in `src/styles/` and compiled CSS in `www/assets/styles/`\r\n\t- Images, in `www/assets/images/`\r\n\r\n## Objects\r\n\r\n## Users\r\n\r\nAuthentication is done through the `Charcoal\\Admin\\User` class.\r\n\r\n# UI Elements\r\n\r\nUser-Interface Elements, in charcoal-admin (or any other Charcoal modules, in fact), are composed of:\r\n\r\n- A PHP Controller, in _src/Charcoal/Admin/{{type}}/{{ident}}_\r\n- A mustache templates, in _templates/charcoal/admin/{{type}}/{{ident}}_\r\n- Optional additional metadata, in _metadata/charcoal/admin/{{type}}/{{ident}}_\r\n\r\nThere are 3 main types of UI Elements: _Templates_, _Widgets_ and _Property Inputs_.\r\n\r\n## Templates\r\n\r\nSee the [src/Charcoal/Admin/Templates](src/Charcoal/Admin/Template) directory for the list of available Templates in this module. Note that the template views themselves (the mustache templates) are located in [templates/charcoal/admin/template/](templates/charcoal/admin/template/) directory.\r\n\r\nIn addition to being standard Template Models (controllers), all _Template_ of the admin module also implements the `\\Charcoal\\Admin\\Template` class.\r\n\r\nThis class provides additional controls to all templates:\r\n\r\n- `has_feedbacks` and `feedbacks`\r\n- `title`, `subtitle`, `show_title` and `show_subtitle`\r\n- `auth_required`\r\n\t- Protected, true by default. Set to false for templates that do not require an authenticated admin user.\r\n\r\n## Widgets\r\n\r\nThe following base widgets are available to build the various _admin_ templates:\r\n\r\n- `Dashboard`\r\n- `Feedbacks`\r\n- `Form`\r\n- `FormGroup`\r\n- `FormProperty`\r\n- `Graph/Bar`\r\n- `Graph/Line`\r\n- `Graph/Pie`\r\n- Layout\r\n- MapWidget\r\n- Table\r\n- TableProperty\r\n\r\n## Property Inputs\r\n\r\nSimilar to other UI elements, _Inputs_ are specialized widgets that are meant to display a \"form element\" for a `Property`.\r\n\r\nThe following property inputs are available  to build forms in the _admin_ module:\r\n\r\n- `Audio`\r\n\t- A special HTML5 widget to record an audio file from the microphone.\r\n- `Checkbox`\r\n- `DateTimePicker`\r\n\t- A date-time picker widget.\r\n\t- Requires the ``\r\n- `File`\r\n\t- A default `<input type=\"file\">` that can be used as a base for all _File_ properties.\r\n- `Image`\r\n\t- A specialized file input meant for uploading / previewing images.\r\n- `MapWidget`\r\n\t- A specialized widget to edit a point on a map.\r\n\t- Requires google-map.\r\n- `Number`\r\n- `Radio`\r\n- `Readonly`\r\n- `Select`\r\n- `Switch`\r\n\t- A specialized _Checkbox_ meant to be displayed as an on/off switch.\r\n- `Text`\r\n\t- A default `<input type=\"text\">` that can be used with most property types.\r\n- `Textarea`\r\n\t- A default `<textarea>` editor that can be used with most textual property types.\r\n- `Tinymce`\r\n\t- A specialized _Textarea_ wysiwyg editor.\r\n\t- Requires the `tinymce` javascript library.\r\n\r\n# Actions\r\n\r\nSee the [src/Charcoal/Admin/Action/](src/Charcoal/Admin/Action/) directory for the list of availables Actions in this module.\r\n\r\nIn addition to being standard Action Models (controllers), all _Action_ of the admin module also implements the `\\Charcoal\\Admin\\Action` class.\r\n\r\n## Post Actions\r\n\r\n- `admin/login`\r\n- `admin/object/delete`\r\n- `admin/object/save`\r\n- `admin/object/update`\r\n- `admin/widget/load`\r\n- `admin/widget/table/inline`\r\n- `admin/widget/table/inlinue-multi`\r\n\r\n## Cli Actions\r\n\r\nSee the [src/Charcoal/Admin/Action/Cli/](src/Charcoal/Admin/Action/Cli/) directory for the list of all available Cli Actions in this module.\r\n\r\n_Cli Actions_ are specialized action meant to be run, interactively, from the Command Line Interface. With the Cli Actions in this module, it becomes quick and easy to manage a Charcoal project directly from a Terminal.\r\n\r\n> ðŸ‘‰ The [charcoal-cli](https://github.com/locomotivemtl/charcoal-project-boilerplate/blob/master/charcoal-cli.php) tool, available from `charcoal-project-boilerplate`, is the perfect tool to call the CLI Actions. Make sure it stays outside the document root!\r\n\r\n- `admin/objects`\r\n\t- List the object of a certain `obj-type`.\r\n- `admin/object/create`\r\n\t- Create a new object (and save it to storage) of a certain `obj-type` according to its metadata's properties.\r\n- `admin/object/table/alter`\r\n\t- Alter the existing database table of `obj-type` according to its metadata's properties.\r\n- `admin/object/table/create`\r\n\t- Create the database table for `obj-type` according to its metadata's properties.\r\n- `admin/user/create`\r\n\r\n\r\n# Development\r\n\r\n## Coding style\r\n\r\nThe Charcoal-Admin module follows the Charcoal coding-style:\r\n\r\n- [_PSR-1_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md), except for\r\n\t- Method names MUST be declared in `snake_case`.\r\n- [_PSR-2_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md), except for the PSR-1 requirement.q\r\n- [_PSR-4_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md), autoloading is therefore provided by _Composer_\r\n- [_phpDocumentor_](http://phpdoc.org/)\r\n\t- Add DocBlocks for all classes, methods, and functions;\r\n\t- For type-hinting, use `boolean` (instead of `bool`), `integer` (instead of `int`), `float` (instead of `double` or `real`);\r\n\t- Omit the `@return` tag if the method does not return anything.\r\n- Naming conventions\r\n\t- Read the [phpcs.xml](phpcs.xml) file for all the details.\r\n\r\n> Coding style validation / enforcement can be performed with `grunt phpcs`. An auto-fixer is also available with `grunt phpcbf`.\r\n\r\nFor Javascript, the following coding style is enforced:\r\n\r\n- **todo**\r\n\r\nEvery classes, methods and functions should be covered by unit tests. PHP code can be tested with _PHPUnit_ and Javascript code with _QUnit_.\r\n\r\n## Authors\r\n\r\n- Mathieu Ducharme <mat@locomotive.ca>\r\n- Benjamin Roch <benjamin@locomotive.ca>\r\n- Dominic Lord <dom@locomotive.ca>\r\n- Chauncey McAskill <chauncey@locomotive.ca>\r\n- Antoine Boulanger <antoine@locomotive.ca>\r\n\r\n## Changelog\r\n\r\n### 0.1\r\n\r\n_Unreleased_\r\n- Initial release\r\n\r\n## TODOs\r\n\r\n- Unit test coverage\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}